name: Experiment

on:
  issue_comment:
    types:
      - created
      
permissions:
  contents: read
  pull-requests: read

jobs:
  parsing:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.get-output.outputs.action }}
      flavors: ${{ steps.get-output.outputs.flavors }}
      options: ${{ steps.get-output.outputs.options }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
      - name: Parse command
        id: parse-input
        uses: ./.github/actions/command-parser
        with:
          command: ${{ github.event.comment.body }}
      - name: Get job action and build flavors
        id: get-output
        run: | 
          echo "action=${{ toJson(steps.parse-input.outputs.action) }}" >> $GITHUB_OUTPUT
          echo "flavors=${{ toJson(steps.parse-input.outputs.flavors) }}" >> $GITHUB_OUTPUT
          echo ${{ steps.parse-input.outputs.options }}
          echo ${{ toJson(steps.parse-input.outputs.options) }}
          # echo "options=${{ toJson(steps.parse-input.outputs.options) }}" >> $GITHUB_OUTPUT
          echo "options=$(jq -r -c . <<< "${{ toJson(steps.parse-input.outputs.options) }}")" >> $GITHUB_OUTPUT
      - name: Check
        run: jq . <<< '${{ steps.get-output.outputs.options }}'

  run-matrix:
    needs: parsing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        options: ${{ fromJSON(needs.parsing.outputs.options) }}
    env:
      mode: ${{ matrix.options.mode }}
    steps:
      - name: buid
        run: |
          echo ${{ matrix.options.mode }}
          echo "mode $mode"
          

   
  # command-parser:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.issue.pull_request && (startsWith(github.event.comment.body, '/build') || startsWith(github.event.comment.body, '/test')) }} 
  #   outputs:
  #     arguments: ${{ steps.check-command.outputs.arguments }}
  #     arguments2: ${{ steps.check-command.outputs.arguments2 }}
  #     command: ${{ steps.check-command.outputs.command }}
  #   steps:
  #     - name: Check command from input
  #       id: check-command
  #       run: |
  #         rawInput="${{ github.event.comment.body }}"
  #         input=${rawInput///""}

  #         IFS=" " read -ra inputSplitted <<< "$input"
  #         action=${inputSplitted[0]}
  #         options=${input/$action/""}

  #         echo $action
  #         echo "command=$action" >> "$GITHUB_OUTPUT"

  #         echo $options

  #         IFS="," read -ra optionsSplitted <<< "$options"
  #         for option in "${optionsSplitted[@]}"; do
  #           echo $option
  #         done

  #         JSON="[$(echo $optionsSplitted | sed 's/ /, /g')]"

  #         echo "arguments=$JSON" >> "$GITHUB_OUTPUT"
  #         echo "arguments2=$optionsSplitted" >> "$GITHUB_OUTPUT"

  #         echo "finish"


  #     - name: Check output
  #       id: check-output
  #       run: |
  #         echo "start"
  #         echo ${{ steps.check-command.outputs.command }}
  #         echo ${{ steps.check-command.outputs.arguments }}



